创建 venv 虚拟环境
python -m venv myenv
如果本机使用Python3则
python3 -m venv myenv

激活 venv 虚拟环境（无需管理员权限）
Windows（CMD）：
myenv\Scripts\activate

如果提示权限问题，可以用临时命令调整执行策略（不需管理员）：
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process

macOS/Linux:
source myenv/bin/activate

-------------------------------------------------------------------
-------------------------------依赖管理-----------------------------
-------------------------------------------------------------------
用 pip freeze 导出当前环境所有依赖（适合整个 A 项目）
pip freeze > requirements.txt

用 pipreqs 自动生成 requirements.txt（适合子模块，比如 A/B）
pip install pipreqs
pipreqs /path/to/project --force

安装依赖：
pip install -r requirements.txt

-------------------------------------------------------------------
-------------------------------打包软件-----------------------------
-------------------------------------------------------------------
安装 PyInstaller（在虚拟环境中）：
pip install pyinstaller

进入包含 main.py 的目录，执行打包命令：
pyinstaller --onefile --noconsole main.py
--onefile：生成单个 .exe 文件。
--noconsole：如果是图形界面应用（如你用了 tkinter 或 PyQt），这个选项可以防止弹出黑色终端窗口。

生成的可执行文件路径：
打包完成后会在 dist/ 文件夹中生成 main.exe。

双击运行：
用户无需安装 Python，也不需要激活虚拟环境，直接双击 .exe 文件即可运行

更新脚本后，如果你已经使用 PyInstaller 打包过一次，要重新生成可执行文件（.exe），只需重复执行一次 PyInstaller 命令即可。

如果你想干净地重新打包，可以先手动删除旧的 dist/ 和 build/ 文件夹，以及 main.spec 文件，然后再打包：
Remove-Item -Recurse -Force .\build
Remove-Item -Recurse -Force .\dist
Remove-Item -Force .\main.spec
pyinstaller --onefile --noconsole main.py
